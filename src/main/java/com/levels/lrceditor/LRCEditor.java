package com.levels.lrceditor;

import com.levels.lrceditor.model.Lyric;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Leandro Valdearenas
 */
public class LRCEditor extends javax.swing.JFrame {

    /**
     * Creates new form LRCEditor
     */
    public LRCEditor() {
        this.listModel = new DefaultListModel();
        this.songLength = "?";
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnSelect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLyrics = new javax.swing.JList<>();
        txtTimestamp = new javax.swing.JTextField();
        txtLyric = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSaveLRC = new javax.swing.JButton();

        fileChooser.setDialogTitle("Select your LRC file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(133, 192, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 49, 100));
        jLabel1.setText("LeVel's LRC Editor");

        jSeparator1.setForeground(new java.awt.Color(22, 106, 255));

        btnSelect.setBackground(new java.awt.Color(147, 228, 255));
        btnSelect.setForeground(new java.awt.Color(0, 107, 149));
        btnSelect.setText("Select LRC file");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(12, 86, 124));
        jScrollPane1.setForeground(new java.awt.Color(93, 124, 225));

        listLyrics.setBackground(new java.awt.Color(11, 116, 185));
        listLyrics.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        listLyrics.setForeground(new java.awt.Color(255, 217, 243));
        listLyrics.setModel(listModel);
        listLyrics.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listLyrics.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listLyricsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listLyrics);

        btnSave.setBackground(new java.awt.Color(47, 255, 115));
        btnSave.setForeground(new java.awt.Color(0, 114, 29));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(218, 0, 57));
        btnDelete.setForeground(new java.awt.Color(255, 222, 222));
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSaveLRC.setBackground(new java.awt.Color(248, 255, 130));
        btnSaveLRC.setForeground(new java.awt.Color(107, 56, 0));
        btnSaveLRC.setText("SAVE LRC FILE");
        btnSaveLRC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveLRCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLyric, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveLRC)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelect)
                    .addComponent(btnSaveLRC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLyric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // SELECT LRC FILE BUTTON
    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                // Clear the list and read the file
                this.listModel.clear();
                this.songLength = "?";
                this.filePath = file.getAbsolutePath();
                readFile(this.filePath);
            } catch (IOException ex) {
                System.out.println("Problem accessing file: " + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    // CHANGE LYRIC SELECTION
    private void listLyricsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listLyricsValueChanged
        if (!evt.getValueIsAdjusting()) {
            changeSelection(this.listLyrics.getSelectedValue());
        }
    }//GEN-LAST:event_listLyricsValueChanged

    // DELETE SELECTED LYRIC
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            Lyric savedLyric = stringToLyric(String.format("%s %s", txtTimestamp.getText(), txtLyric.getText()));
            for (int i = 0; i < listModel.size(); i++) {
                Lyric lyric = listModel.getElementAt(i);
                if (lyric.getTimestamp().compareTo(savedLyric.getTimestamp()) == 0) {
                    listModel.removeElementAt(i);
                    break;
                }
            }
            this.listLyrics.clearSelection();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid timestamp. Try again. (" + e.getMessage() + ")");
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "The timestamp is invalid. Make sure it looks like the next example: [00:00.000]");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // ADD/UPDATE LYRIC
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Lyric savedLyric = stringToLyric(String.format("%s %s", txtTimestamp.getText(), txtLyric.getText()));
            boolean isNewLyric = true;
            for (int i = 0; i < listModel.size(); i++) {
                Lyric lyric = listModel.getElementAt(i);
                if (lyric.getTimestamp().compareTo(savedLyric.getTimestamp()) == 0) {
                    lyric.setLyric(savedLyric.getLyric());
                    isNewLyric = false;
                    break;
                }
            }
            if (isNewLyric) {
                for (int i = 0; i < listModel.size(); i++) {
                    Lyric lyric = listModel.getElementAt(i);
                    if (savedLyric.getTimestamp().compareTo(lyric.getTimestamp()) < 0) {
                        listModel.add(i, savedLyric);
                        break;
                    }
                }
            }
            this.listLyrics.clearSelection();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid timestamp. Try again. (" + e.getMessage() + ")");
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "The timestamp is invalid. Make sure it looks like the next example: [00:00.000]");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // SAVE LRC FILE
    private void btnSaveLRCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveLRCActionPerformed
        saveFile(this.filePath);
    }//GEN-LAST:event_btnSaveLRCActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LRCEditor().setVisible(true);
        });
    }

    // READ FILE AND CONVERT TO LYRICS
    private void readFile(String path) throws FileNotFoundException {
        File myObj = new File(path);
        try (Scanner myReader = new Scanner(myObj)) {
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                // Save song length if declared
                if (data.contains("[length: ")) {
                    this.songLength = data.split("length:")[1].split("\\]")[0].strip();
                }
                // Only add item to list if it's a timestamp
                if (data.contains("[") && Character.isDigit(data.charAt(1))) {
                    Lyric lyric = stringToLyric(data);
                    listModel.addElement(lyric);
                }
            }
        }
    }

    // SAVE TO FILE
    private void saveFile(String path) {
        try {
            try (FileWriter myWriter = new FileWriter(path)) {
                myWriter.write("[length: " + this.songLength + "]\n[tool: LeVel's LRC Editor]\n");
                for (int i = 0; i < this.listModel.size(); i++) {
                    myWriter.write(this.listModel.elementAt(i).toLyricString());
                }
            }
            JOptionPane.showMessageDialog(null, "Successfully wrote to the file.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "An error ocurred: " + e.getMessage());
        }
    }
    
    // CHANGE SELECTION
    private void changeSelection(Lyric lyric) {
        if (lyric == null) {
            lyric = new Lyric();
        }
        this.selectedLyric = lyric;
        this.txtTimestamp.setText(this.selectedLyric.getTimestampString());
        this.txtLyric.setText(this.selectedLyric.getLyric());
        this.btnDelete.setEnabled(lyric.getTimestamp() != null);
    }

    // CONVERT STRING INTO LYRIC
    private Lyric stringToLyric(String fullLyric) throws NumberFormatException {
        String[] fullTime = fullLyric.substring(1).split("\\]")[0].split("[:.]");
        Duration timestamp = Duration
                .ofMinutes(Integer.parseInt(fullTime[0]))
                .plusSeconds(Integer.parseInt(fullTime[1]))
                .plusMillis(Integer.parseInt(fullTime[2]));
        String lyric = fullLyric.split("\\]")[1].strip();
        return new Lyric(timestamp, lyric);
    }

    // Default List Model
    private final DefaultListModel<Lyric> listModel;
    private Lyric selectedLyric;
    private String filePath;
    private String songLength;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveLRC;
    private javax.swing.JButton btnSelect;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<Lyric> listLyrics;
    private javax.swing.JTextField txtLyric;
    private javax.swing.JTextField txtTimestamp;
    // End of variables declaration//GEN-END:variables
}
