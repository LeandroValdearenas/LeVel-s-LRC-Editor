package com.levels.lrceditor;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author Leandro Valdearenas
 */
public class LRCEditor extends javax.swing.JFrame {

    // Extensions
    private final FileNameExtensionFilter LRC_EXTENSION = new FileNameExtensionFilter("Lyric File (.lrc)", "lrc");
    private final FileNameExtensionFilter MP3_EXTENSION = new FileNameExtensionFilter("MP3 File (.mp3)", "mp3");

    // MP3 Player
    private final Mp3Player MP3_PLAYER;
    
    // Default List Model for the Lyrics
    private final DefaultListModel<Lyric> LIST_MODEL;
    
    // Paths
    private String lrcPath;

    // Selected Lyric (for editing)
    private Lyric selectedLyric;

    /**
     * Creates new form LRCEditor
     */
    public LRCEditor() {
        this.MP3_PLAYER = new Mp3Player(this);
        this.LIST_MODEL = new DefaultListModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fchOpen = new javax.swing.JFileChooser();
        fchSave = new javax.swing.JFileChooser();
        pnlMain = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        btnOpenLrcFile = new javax.swing.JButton();
        btnSaveLRC = new javax.swing.JButton();
        tabMain = new javax.swing.JTabbedPane();
        pnlSetLyrics = new javax.swing.JPanel();
        lblSetLyrics = new javax.swing.JLabel();
        scrTxaLyrics = new javax.swing.JScrollPane();
        txaLyrics = new javax.swing.JTextArea();
        pnlEditLyrics = new javax.swing.JPanel();
        scrLyrics = new javax.swing.JScrollPane();
        lstLyrics = new javax.swing.JList<>();
        txtTimestamp = new javax.swing.JTextField();
        txtLyric = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlSong = new javax.swing.JPanel();
        sldPlayback = new javax.swing.JSlider();
        lblSongLength = new javax.swing.JLabel();
        btnOpenMp3File = new javax.swing.JButton();
        btnPlaySong = new javax.swing.JButton();
        btnPauseSong = new javax.swing.JButton();
        lblSongTimestamp = new javax.swing.JLabel();
        mnuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniNew = new javax.swing.JMenuItem();
        mniOpen = new javax.swing.JMenuItem();
        sprMnuFile = new javax.swing.JPopupMenu.Separator();
        mniSave = new javax.swing.JMenuItem();
        mniSaveAs = new javax.swing.JMenuItem();
        mnuSong = new javax.swing.JMenu();
        mniOpenMp3 = new javax.swing.JMenuItem();
        mniClearMp3 = new javax.swing.JMenuItem();
        sprMnuSong = new javax.swing.JPopupMenu.Separator();
        mniPlay = new javax.swing.JMenuItem();
        mniPause = new javax.swing.JMenuItem();
        mniStop = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mniParseHtml = new javax.swing.JMenuItem();
        sprMnuTools = new javax.swing.JPopupMenu.Separator();
        mniTimestamps = new javax.swing.JMenuItem();
        mniSort = new javax.swing.JMenuItem();

        fchOpen.setBackground(pnlMain.getBackground());
        fchOpen.setCurrentDirectory(new File(""));

        fchSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fchSave.setBackground(pnlMain.getBackground());
        fchSave.setCurrentDirectory(new File(""));
        fchSave.setDialogTitle("Save your LRC file as");
        fchSave.setFileFilter(LRC_EXTENSION);
        fchSave.setSelectedFile(new File(".lrc"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(lrcPath);
        setIconImage(new ImageIcon(getClass().getResource("/images/icon.png")).getImage());

        pnlMain.setBackground(new java.awt.Color(133, 192, 255));
        pnlMain.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTitle.setFont(new java.awt.Font("Berlin Sans FB", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 49, 100));
        lblTitle.setText("LeVel's LRC Editor");

        btnOpenLrcFile.setBackground(new java.awt.Color(147, 228, 255));
        btnOpenLrcFile.setForeground(new java.awt.Color(0, 107, 149));
        btnOpenLrcFile.setText("Open LRC File");
        btnOpenLrcFile.setToolTipText("Open a pre-existing .lrc file to start editing");
        btnOpenLrcFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenLrcFileActionPerformed(evt);
            }
        });

        btnSaveLRC.setBackground(new java.awt.Color(248, 255, 130));
        btnSaveLRC.setToolTipText("Save the .lrc file");
        btnSaveLRC.setEnabled(false);
        btnSaveLRC.setLabel("Save LRC File");
        btnSaveLRC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveLRCActionPerformed(evt);
            }
        });

        tabMain.setBackground(pnlMain.getBackground());
        tabMain.setForeground(lblTitle.getForeground());
        tabMain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabMainStateChanged(evt);
            }
        });

        pnlSetLyrics.setBackground(new java.awt.Color(246, 86, 181));

        lblSetLyrics.setForeground(new java.awt.Color(243, 243, 243));
        lblSetLyrics.setText("Insert your lyrics below, without timestamp.");

        scrTxaLyrics.setBackground(txaLyrics.getForeground());
        scrTxaLyrics.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scrTxaLyrics.setForeground(pnlSetLyrics.getBackground());

        txaLyrics.setBackground(new java.awt.Color(101, 0, 82));
        txaLyrics.setColumns(20);
        txaLyrics.setForeground(new java.awt.Color(255, 192, 208));
        txaLyrics.setRows(5);
        scrTxaLyrics.setViewportView(txaLyrics);

        javax.swing.GroupLayout pnlSetLyricsLayout = new javax.swing.GroupLayout(pnlSetLyrics);
        pnlSetLyrics.setLayout(pnlSetLyricsLayout);
        pnlSetLyricsLayout.setHorizontalGroup(
            pnlSetLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSetLyricsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSetLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrTxaLyrics, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pnlSetLyricsLayout.createSequentialGroup()
                        .addComponent(lblSetLyrics)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlSetLyricsLayout.setVerticalGroup(
            pnlSetLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSetLyricsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSetLyrics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrTxaLyrics, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabMain.addTab("Set Lyrics", pnlSetLyrics);

        pnlEditLyrics.setBackground(new java.awt.Color(89, 148, 255));

        scrLyrics.setBackground(new java.awt.Color(12, 86, 124));
        scrLyrics.setForeground(new java.awt.Color(93, 124, 225));

        lstLyrics.setBackground(new java.awt.Color(11, 116, 185));
        lstLyrics.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lstLyrics.setForeground(new java.awt.Color(255, 217, 243));
        lstLyrics.setModel(LIST_MODEL);
        lstLyrics.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstLyrics.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lstLyricsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstLyricsKeyReleased(evt);
            }
        });
        lstLyrics.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstLyricsValueChanged(evt);
            }
        });
        scrLyrics.setViewportView(lstLyrics);

        txtTimestamp.setToolTipText("Current line's timestamp, formatted: [00:00.000]");

        txtLyric.setToolTipText("Current line");

        btnSave.setBackground(new java.awt.Color(47, 255, 115));
        btnSave.setForeground(new java.awt.Color(0, 114, 29));
        btnSave.setText("Save");
        btnSave.setToolTipText("Save the line in the provided timestamp. (If the timestamp already exists, the line will be replaced.)");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(218, 0, 57));
        btnDelete.setForeground(new java.awt.Color(255, 222, 222));
        btnDelete.setText("Delete");
        btnDelete.setToolTipText("Delete the selected line.");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEditLyricsLayout = new javax.swing.GroupLayout(pnlEditLyrics);
        pnlEditLyrics.setLayout(pnlEditLyricsLayout);
        pnlEditLyricsLayout.setHorizontalGroup(
            pnlEditLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditLyricsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLyric)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addContainerGap())
            .addGroup(pnlEditLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlEditLyricsLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrLyrics, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlEditLyricsLayout.setVerticalGroup(
            pnlEditLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEditLyricsLayout.createSequentialGroup()
                .addContainerGap(335, Short.MAX_VALUE)
                .addGroup(pnlEditLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLyric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete)
                    .addComponent(btnSave))
                .addContainerGap())
            .addGroup(pnlEditLyricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlEditLyricsLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrLyrics, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addGap(38, 38, 38)))
        );

        tabMain.addTab("Edit Lyrics", pnlEditLyrics);

        pnlSong.setBackground(new java.awt.Color(82, 173, 255));
        pnlSong.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        sldPlayback.setBackground(new java.awt.Color(34, 92, 137));
        sldPlayback.setForeground(new java.awt.Color(182, 24, 143));
        sldPlayback.setValue(0);
        sldPlayback.setEnabled(false);
        sldPlayback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sldPlaybackMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sldPlaybackMouseReleased(evt);
            }
        });
        sldPlayback.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sldPlaybackKeyPressed(evt);
            }
        });

        lblSongLength.setForeground(new java.awt.Color(8, 6, 65));
        lblSongLength.setText("00:00.0");

        btnOpenMp3File.setBackground(btnPlaySong.getBackground());
        btnOpenMp3File.setForeground(btnPlaySong.getForeground());
        btnOpenMp3File.setText("Open MP3 File");
        btnOpenMp3File.setToolTipText("Open a .mp3 file to play it while editing");
        btnOpenMp3File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenMp3FileActionPerformed(evt);
            }
        });

        btnPlaySong.setBackground(new java.awt.Color(40, 99, 156));
        btnPlaySong.setForeground(new java.awt.Color(255, 195, 230));
        btnPlaySong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        btnPlaySong.setEnabled(false);
        btnPlaySong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaySongActionPerformed(evt);
            }
        });

        btnPauseSong.setBackground(new java.awt.Color(40, 99, 156));
        btnPauseSong.setForeground(new java.awt.Color(255, 195, 230));
        btnPauseSong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/stop.png"))); // NOI18N
        btnPauseSong.setEnabled(false);
        btnPauseSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseSongActionPerformed(evt);
            }
        });

        lblSongTimestamp.setForeground(new java.awt.Color(8, 6, 65));
        lblSongTimestamp.setText("00:00.0");

        javax.swing.GroupLayout pnlSongLayout = new javax.swing.GroupLayout(pnlSong);
        pnlSong.setLayout(pnlSongLayout);
        pnlSongLayout.setHorizontalGroup(
            pnlSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSongLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnOpenMp3File, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPlaySong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPauseSong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSongTimestamp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sldPlayback, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSongLength)
                .addContainerGap())
        );
        pnlSongLayout.setVerticalGroup(
            pnlSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSongLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(pnlSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPauseSong)
                    .addGroup(pnlSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnPlaySong, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sldPlayback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSongLength)
                            .addComponent(btnOpenMp3File)
                            .addComponent(lblSongTimestamp))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(btnOpenLrcFile)
                .addGap(18, 18, 18)
                .addComponent(btnSaveLRC)
                .addContainerGap())
            .addComponent(pnlSong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabMain))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnSaveLRC)
                    .addComponent(btnOpenLrcFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 401, Short.MAX_VALUE)
                .addComponent(pnlSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(48, 48, 48)
                    .addComponent(tabMain)
                    .addGap(40, 40, 40)))
        );

        tabMain.getAccessibleContext().setAccessibleName("tab1");

        mnuFile.setText("File");

        mniNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniNew.setText("New File");
        mniNew.setToolTipText("Start over from a new file");
        mniNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNewActionPerformed(evt);
            }
        });
        mnuFile.add(mniNew);

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniOpen.setText("Open File...");
        mniOpen.setToolTipText("Open a pre-existing file to start editing");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mniOpen);
        mnuFile.add(sprMnuFile);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSave.setText("Save File");
        mniSave.setToolTipText("Save changes to .lrc file");
        mniSave.setEnabled(false);
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mniSave);

        mniSaveAs.setText("Save As...");
        mniSaveAs.setToolTipText("Save as a new .lrc file");
        mniSaveAs.setEnabled(false);
        mniSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveAsActionPerformed(evt);
            }
        });
        mnuFile.add(mniSaveAs);

        mnuBar.add(mnuFile);

        mnuSong.setText("Song");

        mniOpenMp3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniOpenMp3.setText("Open MP3 File...");
        mniOpenMp3.setToolTipText("Open an .mp3 file to start playing while editing");
        mniOpenMp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenMp3ActionPerformed(evt);
            }
        });
        mnuSong.add(mniOpenMp3);

        mniClearMp3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniClearMp3.setText("Clear Song");
        mniClearMp3.setToolTipText("Remove song currently being played in the mp3 player");
        mniClearMp3.setEnabled(false);
        mniClearMp3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniClearMp3ActionPerformed(evt);
            }
        });
        mnuSong.add(mniClearMp3);
        mnuSong.add(sprMnuSong);

        mniPlay.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniPlay.setText("Play Song");
        mniPlay.setEnabled(false);
        mniPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPlayActionPerformed(evt);
            }
        });
        mnuSong.add(mniPlay);

        mniPause.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniPause.setText("Pause Song");
        mniPause.setEnabled(false);
        mniPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPauseActionPerformed(evt);
            }
        });
        mnuSong.add(mniPause);

        mniStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniStop.setText("Stop Song");
        mniStop.setEnabled(false);
        mniStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniStopActionPerformed(evt);
            }
        });
        mnuSong.add(mniStop);

        mnuBar.add(mnuSong);

        mnuTools.setText("Tools");
        mnuTools.setToolTipText("");

        mniParseHtml.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniParseHtml.setText("Parse Text From Html");
        mniParseHtml.setToolTipText("Parse inserted text from a div element to correctly spaced text");
        mniParseHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniParseHtmlActionPerformed(evt);
            }
        });
        mnuTools.add(mniParseHtml);
        mnuTools.add(sprMnuTools);

        mniTimestamps.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniTimestamps.setText("Change All Timestamps");
        mniTimestamps.setToolTipText("Move all timestamps a specified amount of time (forward or backward)");
        mniTimestamps.setEnabled(false);
        mniTimestamps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniTimestampsActionPerformed(evt);
            }
        });
        mnuTools.add(mniTimestamps);

        mniSort.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSort.setText("Sort Lyrics");
        mniSort.setToolTipText("Sort lyrics by their timestamps");
        mniSort.setEnabled(false);
        mniSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSortActionPerformed(evt);
            }
        });
        mnuTools.add(mniSort);

        mnuBar.add(mnuTools);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // ACTION EVENTS:
    // -> MENU BAR ITEMS
    // ---> FILE

    private void mniNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNewActionPerformed
        resetLrc();
    }//GEN-LAST:event_mniNewActionPerformed

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        openLrcFile();
    }//GEN-LAST:event_mniOpenActionPerformed

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        saveFile();
    }//GEN-LAST:event_mniSaveActionPerformed

    private void mniSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveAsActionPerformed
        try {
            saveFileAs();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "An error occurred while saving file: " + e.getMessage());
        }
    }//GEN-LAST:event_mniSaveAsActionPerformed

    // ---> SONG

    private void mniOpenMp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenMp3ActionPerformed
        openMp3File();
    }//GEN-LAST:event_mniOpenMp3ActionPerformed

    private void mniClearMp3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniClearMp3ActionPerformed
        this.MP3_PLAYER.loadSong(null);
        this.sldPlayback.setToolTipText(null);
        disableMp3Actions();
    }//GEN-LAST:event_mniClearMp3ActionPerformed

    private void mniPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPlayActionPerformed
        playSong();
    }//GEN-LAST:event_mniPlayActionPerformed

    private void mniPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPauseActionPerformed
        pauseSong();
    }//GEN-LAST:event_mniPauseActionPerformed

    private void mniStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniStopActionPerformed
        this.MP3_PLAYER.endSong();
    }//GEN-LAST:event_mniStopActionPerformed

    // ---> TOOLS

    private void mniParseHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniParseHtmlActionPerformed
        String text = txaLyrics.getText();

        // Parse correct spacing from div class
        var parsedText = text
                .replaceAll("(?=<div )((.|\\n)*?)(?=>)>", "")
                .replaceAll("</div>", "\n")
                .replaceAll("(?=<span )((.|\\n)*?)(?=>)>", "")
                .replaceAll("</span>", "\n")
                .replaceAll("(?=<br )((.|\\n)*?)(?=>)>", "")
                .trim();
        
        // Add line break at start and end
        parsedText = String.format("\n%s\n", parsedText);
        
        txaLyrics.setText(parsedText);
    }//GEN-LAST:event_mniParseHtmlActionPerformed

    private void mniTimestampsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniTimestampsActionPerformed
        changeAllTimestamps();
    }//GEN-LAST:event_mniTimestampsActionPerformed

    private void mniSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSortActionPerformed
        sortLyrics();
    }//GEN-LAST:event_mniSortActionPerformed

    // -> LRC BUTTONS

    private void btnOpenLrcFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenLrcFileActionPerformed
        openLrcFile();
    }//GEN-LAST:event_btnOpenLrcFileActionPerformed

    private void btnSaveLRCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveLRCActionPerformed
        saveFile();
    }//GEN-LAST:event_btnSaveLRCActionPerformed

    // -> TABS

    private void tabMainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabMainStateChanged
        switch (tabMain.getSelectedIndex()) {
            case 0 ->
                // Change to first tab
                setTxaTextFromModel();
            case 1 ->
                // Change to second tab
                setModelLyricsFromTxa();
        }
    }//GEN-LAST:event_tabMainStateChanged

    // ---> EDIT LYRICS TAB

    private void lstLyricsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstLyricsValueChanged
        selectLyric(this.lstLyrics.getSelectedValue());
    }//GEN-LAST:event_lstLyricsValueChanged

    private void lstLyricsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstLyricsKeyPressed
        switch (evt.getKeyCode()) {
            // Back space
            case KeyEvent.VK_BACK_SPACE ->
                skipSongToSelectedLyric();

            // Enter
            case KeyEvent.VK_ENTER -> {
                setLyricTimestampFromSong();

                // Get selected lyric's index
                int selectedIndex = lstLyrics.getSelectedIndex();

                // If lyric is not last
                if (++selectedIndex < LIST_MODEL.size()) {
                    // Select next
                    lstLyrics.setSelectedIndex(selectedIndex);
                }
            }

            // Left key
            case KeyEvent.VK_LEFT ->
                skipSongBack(5000);

            // Right key
            case KeyEvent.VK_RIGHT ->
                skipSongForward(5000);

            // Space bar
            case KeyEvent.VK_SPACE ->
                setLyricTimestampFromSong();

            // 'P' key
            case KeyEvent.VK_P ->
                togglePause();

            // Delete key
            case KeyEvent.VK_DELETE ->
                removeLyric();
        }
    }//GEN-LAST:event_lstLyricsKeyPressed

    private void lstLyricsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstLyricsKeyReleased
        switch (evt.getKeyCode()) {
            // Back space, Left key, Right key
            case KeyEvent.VK_BACK_SPACE, KeyEvent.VK_LEFT, KeyEvent.VK_RIGHT -> {
                // If a song is selected and paused, resume it.
                if (MP3_PLAYER.hasSelectedSong() && MP3_PLAYER.isPaused()) {
                    playSong();
                }
            }

        }
    }//GEN-LAST:event_lstLyricsKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            var savedLyric = new Lyric(stringToTimestamp(txtTimestamp.getText()), txtLyric.getText());
            var selectedIndex = lstLyrics.getSelectedIndex();
            if (!LIST_MODEL.isEmpty()) {
                // Loop through model's lyrics
                for (int i = 0; i < LIST_MODEL.size(); i++) {
                    Lyric lyric = LIST_MODEL.getElementAt(i);

                    if (lyric.getTimestamp() == null) {
                        // If timestamp is null
                        if (lyric.getLyric().equals(savedLyric.getLyric())) {
                            // If lyric is the same, replace timestamp
                            lyric.setTimestamp(savedLyric.getTimestamp());
                            break;
                        }
                    } else if (i == selectedIndex && lyric.getLyric().equals(savedLyric.getLyric())) {
                        // If it's the selected lyric and lyric is unchanged, replace timestamp
                        lyric.setTimestamp(savedLyric.getTimestamp());
                        break;
                    } else {
                        int difference = lyric.getTimestamp().compareTo(savedLyric.getTimestamp());

                        // If timestamp is the same, replace lyric
                        if (difference == 0) {
                            lyric.setLyric(savedLyric.getLyric());
                            break;
                        }

                        // If inserted timestamp is smaller, add the lyric in that position
                        if (difference > 0) {
                            LIST_MODEL.add(i, savedLyric);
                            break;
                        }
                    }

                    // If there is nothing after, add the lyric at the end
                    if (i + 1 == LIST_MODEL.size()) {
                        LIST_MODEL.addElement(savedLyric);
                    }
                }

                // Clear selection
                this.lstLyrics.clearSelection();
            } else {
                LIST_MODEL.addElement(savedLyric);
            }

            // Reset save buttons and other functions
            resetSaveButtons();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid timestamp. Try again. (" + e.getMessage() + ")");
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "The timestamp is invalid. Make sure it looks like the next example: [00:00.000]");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        removeLyric();
    }//GEN-LAST:event_btnDeleteActionPerformed

    // -> MP3 PLAYER

    private void btnOpenMp3FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenMp3FileActionPerformed
        openMp3File();
    }//GEN-LAST:event_btnOpenMp3FileActionPerformed

    private void btnPlaySongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaySongActionPerformed
        playSong();
    }//GEN-LAST:event_btnPlaySongActionPerformed

    private void btnPauseSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseSongActionPerformed
        pauseSong();
    }//GEN-LAST:event_btnPauseSongActionPerformed

    private void sldPlaybackMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sldPlaybackMousePressed
        if (sldPlayback.isEnabled()) {
            this.MP3_PLAYER.pauseSong();
            enablePlay();
        }
    }//GEN-LAST:event_sldPlaybackMousePressed

    private void sldPlaybackMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sldPlaybackMouseReleased
        if (sldPlayback.isEnabled()) {
            // Get requested frame
            JSlider source = (JSlider) evt.getSource();

            int frame = source.getValue();
            int millis = ((int) (frame / (this.MP3_PLAYER.getSong().getFrameRatePerMillis())) / 10) * 10;
            setSongPosition(millis, frame);
        }
    }//GEN-LAST:event_sldPlaybackMouseReleased

    private void sldPlaybackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sldPlaybackKeyPressed
        switch (evt.getKeyCode()) {
            // Left key
            case KeyEvent.VK_LEFT ->
                skipSongBack(5000);

            // Right key
            case KeyEvent.VK_RIGHT ->
                skipSongForward(5000);

            // 'P' key
            case KeyEvent.VK_P ->
                togglePause();
        }
    }//GEN-LAST:event_sldPlaybackKeyPressed

    // FUNCTIONS:
    /**
     * Select and play MP3 file
     */
    private void openMp3File() {
        try {
            this.fchOpen.setDialogTitle("Select MP3 file");
            this.fchOpen.setFileFilter(MP3_EXTENSION);
            this.MP3_PLAYER.loadSong(new Song(selectFile()));
            this.sldPlayback.setToolTipText(this.MP3_PLAYER.getSong().getAbsolutePath());
            this.lblSongLength.setText(this.MP3_PLAYER.getSong().getLength());

        } catch (TaskCancelledException e) {
            // If a song has been selected, re-enable mp3 player buttons
            if (MP3_PLAYER.hasSelectedSong()) {
                enablePlay();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problem accessing file: " + e.getMessage());
        }
    }

    /**
     * Select and read LRC file
     */
    private void openLrcFile() {
        try {
            this.fchOpen.setDialogTitle("Select LRC file");
            this.fchOpen.setFileFilter(LRC_EXTENSION);
            this.lrcPath = selectFile();
            setTitle(lrcPath);

            // Open edit tab
            tabMain.setSelectedIndex(1);

            // Clear the list and read the file
            this.LIST_MODEL.clear();
            readLrcFile(this.lrcPath);
            resetSaveButtons();

        } catch (TaskCancelledException e) {
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Problem accessing file: " + e.getMessage());
        }
    }

    /**
     * Select file and return its absolute path
     */
    private String selectFile() throws IOException, TaskCancelledException {
        int returnVal = fchOpen.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // Return selected file's absolute path
            File file = fchOpen.getSelectedFile();
            return file.getAbsolutePath();
        } else {
            // File chooser was cancelled/discarded
            throw new TaskCancelledException();
        }
    }

    /**
     * Read LRC file and extract lyrics from it
     */
    private void readLrcFile(String path) throws FileNotFoundException {
        List<Lyric> lyrics = new ArrayList();
        File myObj = new File(path);
        try (Scanner myReader = new Scanner(myObj)) {
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();

                // Skip empty lines
                if (data.trim().isEmpty()) {
                    continue;
                }

                // Only add item to list if it's a timestamp
                if (Character.isDigit(data.charAt(1))) {
                    Lyric lyric = stringToLyric(data);
                    lyrics.add(lyric);
                    continue;
                }

                // Save song length if declared
                if (data.startsWith("[length: ")) {
                    this.MP3_PLAYER.addSongLength(data.split("\\[length:", 2)[1].split("\\]", 2)[0].strip());
                }
            }
        }

        // Sort lyrics by timestamps
        lyrics.sort((var a, var b) -> a.getTimestamp().compareTo(b.getTimestamp()));

        // Add list to model
        LIST_MODEL.addAll(lyrics);
    }

    /**
     * Reset file path, lyrics, tabs, text areas, selected lyric, buttons.
     */
    private void resetLrc() {
        this.lrcPath = null;
        this.LIST_MODEL.clear();
        this.tabMain.setSelectedIndex(0);
        this.txaLyrics.setText("");
        selectLyric(null);
        resetSaveButtons();
    }

    /**
     * Save file
     */
    private void saveFile() {
        try {
            // If lrcPath is null, save as new file
            if (this.lrcPath == null) {
                // Get current song's path
                String songPath = this.MP3_PLAYER.getSong().getAbsolutePath();

                // If songPath isn't null
                if (songPath != null) {
                    // Ask the user for confirmation
                    int confirmResult = JOptionPane.showConfirmDialog(null, "Save LRC file with song's filename?");

                    // If user confirmed, set songPath as lrcPath (with .lrc extension) and save
                    if (confirmResult == JOptionPane.YES_OPTION) {
                        // Set lrcPath to current song's path and name (but with lrc extension)
                        this.lrcPath = songPath.replace(".mp3", ".lrc");

                        // Save .lrc file
                        saveToFile(this.lrcPath);

                        // Return
                        return;
                    }
                }

                // Save as new file
                saveFileAs();
            } else {
                // Overwrite file
                saveToFile(this.lrcPath);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "An error occurred while saving file: " + e.getMessage());
        }
    }

    /**
     * Save file as...
     */
    private void saveFileAs() throws IOException {
        int option = fchSave.showSaveDialog(null);
        if (option == JFileChooser.APPROVE_OPTION) {
            // Get selected file and its absolute path
            File file = fchSave.getSelectedFile();
            this.lrcPath = file.getAbsolutePath();

            // Save file
            saveToFile(this.lrcPath);

            // Dialog
            JOptionPane.showMessageDialog(null, "File Saved as: " + file.getName());
        }
    }

    /**
     * Save information to file
     */
    private void saveToFile(String path) throws IOException {
        String length = this.MP3_PLAYER.getSong().getLength();

        // If length is null, use last lyric's timestamp
        if (length == null) {
            var timestamp = LIST_MODEL.lastElement().getTimestamp();
            if (timestamp == null) {
                throw new IOException("Last lyric in list is missing a timestamp.");
            }

            // Set last lyric's timestamp as song length
            length = timestamp.toLongString();
        }

        try (FileWriter myWriter = new FileWriter(path)) {
            // Write length and tool
            myWriter.write("[length: " + length + "]\n[tool: LeVel's LRC Editor]\n");

            // Write lyrics with timestamps
            for (int i = 0; i < this.LIST_MODEL.size(); i++) {
                myWriter.write(this.LIST_MODEL.elementAt(i).toLrcString());
            }
        }

        // Update frame's title
        setTitle(lrcPath);
    }

    /**
     * Select lyric and reset Text Inputs and Delete Button
     */
    private void selectLyric(Lyric lyric) {
        var isLyricNull = lyric == null;

        // If lyric is null, create new lyric
        if (isLyricNull) {
            lyric = new Lyric();
        }

        // Reset fields
        this.selectedLyric = lyric;
        this.txtTimestamp.setText(this.selectedLyric.getTimestampString());
        this.txtLyric.setText(this.selectedLyric.getLyric());
        this.btnDelete.setEnabled(!isLyricNull);
    }

    /**
     * Remove selected lyric
     */
    private void removeLyric() {
        // Remove selected lyric
        LIST_MODEL.removeElement(selectedLyric);
        this.lstLyrics.clearSelection();
        resetSaveButtons();
    }

    /**
     * Enable/disable save buttons and other operations
     */
    private void resetSaveButtons() {
        // Enable if model has items, otherwise disable
        boolean enabled = !LIST_MODEL.isEmpty();

        // Disable if any timestamp is null
        if (enabled) {
            for (var l : LIST_MODEL.toArray()) {
                if (((Lyric) l).getTimestamp() == null) {
                    enabled = false;
                    break;
                }
            }
        }

        // Enable/disable elements
        this.btnSaveLRC.setEnabled(enabled);
        this.mniSave.setEnabled(enabled);
        this.mniSaveAs.setEnabled(enabled);
        this.mniTimestamps.setEnabled(enabled);
        this.mniSort.setEnabled(enabled);
    }

    /**
     * Toggle play/pause
     */
    private void togglePause() {
        // If no song has been selected, return
        if (!MP3_PLAYER.hasSelectedSong()) {
            return;
        }

        // If song is paused, resume. Otherwise, pause.
        if (MP3_PLAYER.isPaused()) {
            playSong();
        } else {
            pauseSong();
        }
    }

    /**
     * Play song and enable pause button
     */
    private void playSong() {
        this.MP3_PLAYER.playSong();

        // Enable pause, disable play
        enablePause();
    }

    /**
     * Pause song and enable play button
     */
    private void pauseSong() {
        this.MP3_PLAYER.pauseSong();

        // Enable play, disable pause
        enablePlay();
    }

    /**
     * Set selected lyric's timestamp from current song
     */
    private void setLyricTimestampFromSong() {
        var selectedIndex = lstLyrics.getSelectedIndex();

        // If lyric is selected
        if (lstLyrics.getSelectedIndex() != -1) {
            // Get current timestamp
            var timestamp = new Timestamp(this.MP3_PLAYER.getCurrentMillis());

            var wasEmpty = LIST_MODEL.get(selectedIndex).getTimestamp() == null;

            // Assign timestamp to currently selected lyric
            LIST_MODEL.get(selectedIndex).setTimestamp(timestamp);

            if (wasEmpty) {
                // Make sure to enable save buttons
                resetSaveButtons();
            }

            // If there is a next lyric
            if (selectedIndex + 1 < LIST_MODEL.size()) {
                // Make sure the next 2 lyrics are visible
                lstLyrics.ensureIndexIsVisible(selectedIndex + 2);
            } else {
                // Clear selection
                lstLyrics.clearSelection();
            }
        }
    }

    /**
     * Skip song to selected lyric's timestamp
     */
    private void skipSongToSelectedLyric() {
        var selectedIndex = lstLyrics.getSelectedIndex();

        // If lyric is selected
        if (lstLyrics.getSelectedIndex() != -1) {
            var timestamp = LIST_MODEL.get(selectedIndex).getTimestamp();
            if (timestamp != null) {
                // Set millis and frame
                var millis = (int) (timestamp.toMillis() / 10) * 10;
                var frame = (int) (millis * this.MP3_PLAYER.getSong().getFrameRatePerMillis());

                setSongPosition(millis, frame);
            }
        }
    }

    /**
     * Skip song back
     */
    private void skipSongBack(int skip) {
        var millis = this.MP3_PLAYER.getCurrentMillis();

        // Skip back
        millis -= skip;

        // If timestamp would be negative, set timestamp to 0
        if (millis < 0) {
            millis = 0;
        }

        // Set frame
        var frame = (int) (millis * this.MP3_PLAYER.getSong().getFrameRatePerMillis());

        setSongPosition(millis, frame);
    }

    /**
     * Skip song forward
     */
    private void skipSongForward(int skip) {
        var millis = this.MP3_PLAYER.getCurrentMillis();

        // Skip song forward
        millis += skip;

        // Get maximum as millis
        var maxMillis = (int) (this.sldPlayback.getMaximum() / this.MP3_PLAYER.getSong().getFrameRatePerMillis());

        // If timestamp would be higher than maximum, set to maximum
        if (millis > maxMillis) {
            millis = maxMillis;
        }

        // Set frame
        var frame = (int) (millis * this.MP3_PLAYER.getSong().getFrameRatePerMillis());

        setSongPosition(millis, frame);
    }

    /**
     * Set song position
     */
    private void setSongPosition(int millis, int frame) {
        if (!this.MP3_PLAYER.hasSelectedSong()) {
            return;
        }

        if (!this.MP3_PLAYER.isPaused()) {
            this.MP3_PLAYER.pauseSong();
            enablePlay();
        }

        // Update timestamp and slider UI
        setLblSongTimestampValue(millis);
        setSldPlaybackValue(frame);

        // Update mp3 player's current frame and millis
        this.MP3_PLAYER.setCurrentMillis(millis);
        this.MP3_PLAYER.setCurrentFrame(frame);
    }

    /**
     * Set text area text from model's lyrics
     */
    private void setTxaTextFromModel() {
        // Reset text area
        txaLyrics.setText("");

        // Loop through lstModel and write lines into text area
        for (int i = 0; i < this.LIST_MODEL.size(); i++) {
            var line = this.LIST_MODEL.elementAt(i).getLyric() + (i + 1 < this.LIST_MODEL.size() ? "\n" : "");
            txaLyrics.setText(txaLyrics.getText().concat(line));
        }
    }

    /**
     * Set model's lyrics from text area
     */
    private void setModelLyricsFromTxa() {
        // Get text from text area
        String text = txaLyrics.getText();

        // In case last line is empty, add it to model as line break
        if (!text.isBlank() && text.endsWith("")) {
            text += "\n";
        }

        // Save current lyrics and get text area's lines
        var savedLyrics = LIST_MODEL.toArray();
        var lines = text.lines().toList();

        // Clear List Model
        LIST_MODEL.clear();

        // Loop through text area's lines
        for (var line : lines) {
            // Create new Lyric with this line
            var newLyric = new Lyric(null, line);

            // Loop through saved lyrics
            for (int i = 0; i < savedLyrics.length; i++) {
                // If saved lyric has same text as new lyric
                if (((Lyric) savedLyrics[i]).getLyric().equals(line)) {
                    // Set new lyric's timestamp from saved lyric
                    newLyric.setTimestamp(((Lyric) savedLyrics[i]).getTimestamp());

                    // Remove saved lyric from array
                    savedLyrics = ArrayUtils.remove(savedLyrics, i);

                    // Break inner loop
                    break;
                }
            }

            // Add new lyric to model
            LIST_MODEL.addElement(newLyric);
        }

        // Reset buttons and other functions
        resetSaveButtons();

        // Reset selected lyric and text inputs
        selectLyric(null);
    }

    /**
     * Let user change all timestamps by a defined amount
     */
    private void changeAllTimestamps() {
        String value = JOptionPane.showInputDialog("Move all timestamps by an amount of time (+/-)");
        try {
            // Remove all brackets
            value = trimBrackets(value);

            // Get sign if provided
            boolean addition = true;
            char sign = value.charAt(0);
            if (sign == '+' || sign == '-') {
                // Remove sign from string
                value = value.substring(1).strip();
                addition = sign == '+';
            }

            // Get timestamp
            Timestamp timestamp = stringToTimestamp(value);

            // Check if any timestamp would be negative
            if (!addition) {
                // Set response as -1 so confirm dialog shows up
                int response = -1;

                // Loop through model
                for (int i = 0; i < LIST_MODEL.size(); i++) {
                    // Get timestamp
                    Lyric lyric = LIST_MODEL.getElementAt(i);

                    // If timestamp is negative
                    if (lyric.getTimestamp().compareTo(timestamp) < 0) {
                        // If confirm dialog wasn't shown yet
                        if (response == -1) {
                            // Show confirm dialog
                            response = JOptionPane.showConfirmDialog(null, "Operation results in negative timestamp, proceed anyway? (Would-be negative timestamps will be set to 00:00.000)");
                        }

                        // Check dialog response
                        if (response == JOptionPane.YES_OPTION) {
                            // Set lyric's timestamp so that it would be 0 after substracting
                            lyric.setTimestamp(timestamp);
                        } else {
                            // Cancel operation
                            return;
                        }
                    }
                }
            }

            // Perform addition/substraction
            for (int i = 0; i < LIST_MODEL.size(); i++) {
                LIST_MODEL.getElementAt(i).moveTimestamp(timestamp, addition);
            }

            // Update lyrics list UI
            this.lstLyrics.updateUI();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: Inserted value is invalid. Make sure it's a valid timestamp operation, like: +00:00.000");
        }
    }

    /**
     * Sort model's lyrics by timestamps
     */
    private void sortLyrics() {
        List<Lyric> lyrics = new ArrayList<>();

        // Add model's elements to array list
        for (int i = 0; i < LIST_MODEL.size(); i++) {
            lyrics.add(LIST_MODEL.getElementAt(i));
        }

        // Sort lyrics by timestamps
        lyrics.sort((var a, var b) -> a.getTimestamp().compareTo(b.getTimestamp()));

        // Clear list model
        LIST_MODEL.clear();

        // Add list to model
        LIST_MODEL.addAll(lyrics);
    }

    /**
     * Convert String to Lyric
     */
    private Lyric stringToLyric(String fullLyric) throws NumberFormatException {
        // Get timestamp without brackets
        Timestamp timestamp = stringToTimestamp(fullLyric.split("\\]", 2)[0]);

        // Get everything after first close bracket
        String lyric = fullLyric.split("\\]", 2)[1].strip();

        return new Lyric(timestamp, lyric);
    }

    /**
     * Convert String to Timestamp
     */
    private Timestamp stringToTimestamp(String string) throws NumberFormatException {
        String[] fullTime = trimBrackets(string).split("[:.]");
        Timestamp timestamp = new Timestamp(Integer.parseInt(fullTime[0]), Integer.parseInt(fullTime[1]), Integer.parseInt(fullTime[2]));

        return timestamp;
    }

    /**
     * Trim brackets
     */
    private String trimBrackets(String string) {
        return string.replaceAll("[\\[\\]]", "");
    }

    /**
     * Set playback slider's max size
     *
     * @param maximum Maximum size
     */
    public void setSldPlaybackMaximum(int maximum) {
        this.sldPlayback.setMaximum(maximum);
    }

    /**
     * Set playback slider's position
     *
     * @param value Playback's position (frame)
     */
    public void setSldPlaybackValue(int value) {
        this.sldPlayback.setValue(value);
    }

    /**
     * Set song timestamp value
     *
     * @param millis Milliseconds to display as a timestamp
     */
    public void setLblSongTimestampValue(int millis) {
        var timestamp = new Timestamp(millis);
        this.lblSongTimestamp.setText(timestamp.toShortString());
    }

    /**
     * Enable mp3 actions and slider (pause remains disabled)
     */
    public void enableMp3Player() {
        this.sldPlayback.setEnabled(true);
        this.mniClearMp3.setEnabled(true);
        enablePlay();
    }

    /**
     * Enable play buttons, disable pause buttons
     */
    public void enablePlay() {
        this.btnPlaySong.setEnabled(true);
        this.mniPlay.setEnabled(true);
        this.btnPauseSong.setEnabled(false);
        this.mniPause.setEnabled(false);
        this.mniStop.setEnabled(false);
    }

    /**
     * Disable play buttons, enable pause buttons
     */
    public void enablePause() {
        this.btnPlaySong.setEnabled(false);
        this.mniPlay.setEnabled(false);
        this.btnPauseSong.setEnabled(true);
        this.mniPause.setEnabled(true);
        this.mniStop.setEnabled(true);
    }

    /**
     * Disable all mp3 player buttons and slider
     */
    private void disableMp3Actions() {
        this.btnPlaySong.setEnabled(false);
        this.btnPauseSong.setEnabled(false);
        this.sldPlayback.setValue(0);
        this.sldPlayback.setEnabled(false);
        this.mniClearMp3.setEnabled(false);
        this.mniPlay.setEnabled(false);
        this.mniPause.setEnabled(false);
        this.mniStop.setEnabled(false);
        this.lblSongTimestamp.setText("00:00.0");
        this.lblSongLength.setText("00:00.0");
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(LRCEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LRCEditor().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnOpenLrcFile;
    private javax.swing.JButton btnOpenMp3File;
    private javax.swing.JButton btnPauseSong;
    private javax.swing.JButton btnPlaySong;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveLRC;
    private javax.swing.JFileChooser fchOpen;
    private javax.swing.JFileChooser fchSave;
    private javax.swing.JLabel lblSetLyrics;
    private javax.swing.JLabel lblSongLength;
    private javax.swing.JLabel lblSongTimestamp;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList<Lyric> lstLyrics;
    private javax.swing.JMenuItem mniClearMp3;
    private javax.swing.JMenuItem mniNew;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniOpenMp3;
    private javax.swing.JMenuItem mniParseHtml;
    private javax.swing.JMenuItem mniPause;
    private javax.swing.JMenuItem mniPlay;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniSaveAs;
    private javax.swing.JMenuItem mniSort;
    private javax.swing.JMenuItem mniStop;
    private javax.swing.JMenuItem mniTimestamps;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuSong;
    private javax.swing.JMenu mnuTools;
    private javax.swing.JPanel pnlEditLyrics;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlSetLyrics;
    private javax.swing.JPanel pnlSong;
    private javax.swing.JScrollPane scrLyrics;
    private javax.swing.JScrollPane scrTxaLyrics;
    private javax.swing.JSlider sldPlayback;
    private javax.swing.JPopupMenu.Separator sprMnuFile;
    private javax.swing.JPopupMenu.Separator sprMnuSong;
    private javax.swing.JPopupMenu.Separator sprMnuTools;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTextArea txaLyrics;
    private javax.swing.JTextField txtLyric;
    private javax.swing.JTextField txtTimestamp;
    // End of variables declaration//GEN-END:variables
}
